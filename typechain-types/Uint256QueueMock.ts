/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface Uint256QueueMockInterface extends utils.Interface {
  functions: {
    "dequeue()": FunctionFragment;
    "enqueue(uint256)": FunctionFragment;
    "isEmpty()": FunctionFragment;
    "length()": FunctionFragment;
    "peek()": FunctionFragment;
    "peekLast()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dequeue"
      | "enqueue"
      | "isEmpty"
      | "length"
      | "peek"
      | "peekLast"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dequeue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enqueue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isEmpty", values?: undefined): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "peek", values?: undefined): string;
  encodeFunctionData(functionFragment: "peekLast", values?: undefined): string;

  decodeFunctionResult(functionFragment: "dequeue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enqueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peekLast", data: BytesLike): Result;

  events: {
    "OperationResult(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperationResult"): EventFragment;
}

export interface OperationResultEventObject {
  data: BigNumber;
}
export type OperationResultEvent = TypedEvent<
  [BigNumber],
  OperationResultEventObject
>;

export type OperationResultEventFilter = TypedEventFilter<OperationResultEvent>;

export interface Uint256QueueMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Uint256QueueMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enqueue(
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEmpty(overrides?: CallOverrides): Promise<[boolean]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    peek(overrides?: CallOverrides): Promise<[BigNumber] & { data: BigNumber }>;

    peekLast(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { data: BigNumber }>;
  };

  dequeue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enqueue(
    data: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEmpty(overrides?: CallOverrides): Promise<boolean>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  peek(overrides?: CallOverrides): Promise<BigNumber>;

  peekLast(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    dequeue(overrides?: CallOverrides): Promise<BigNumber>;

    enqueue(
      data: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmpty(overrides?: CallOverrides): Promise<boolean>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    peek(overrides?: CallOverrides): Promise<BigNumber>;

    peekLast(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OperationResult(uint256)"(data?: null): OperationResultEventFilter;
    OperationResult(data?: null): OperationResultEventFilter;
  };

  estimateGas: {
    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enqueue(
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    peek(overrides?: CallOverrides): Promise<BigNumber>;

    peekLast(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enqueue(
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEmpty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peekLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
